alias: app-image-classification-onnx-py
uid: 3d5e908e472b417e

automation_alias: script
automation_uid: 5b4e0237da074764

category: "Modular AI/ML application pipeline"

tags:
- app
- image-classification
- onnx
- python


default_env:
  CM_BATCH_COUNT: '1'
  CM_BATCH_SIZE: '1'


deps:
- tags: detect,os
- tags: get,sys-utils-cm
- names:
  - python
  - python3
  tags: get,python3
- tags: get,cuda
  names:
  - cuda
  enable_if_env:
    USE_CUDA:
    - yes
- tags: get,dataset,imagenet,image-classification,original
- tags: get,dataset-aux,imagenet-aux,image-classification
- tags: get,ml-model,resnet50,_onnx,image-classification
  names:
  - ml-model

- tags: get,generic-python-lib,_package.Pillow
- tags: get,generic-python-lib,_package.numpy
- tags: get,generic-python-lib,_package.opencv-python

- tags: get,generic-python-lib,_onnxruntime
  skip_if_env:
    USE_CUDA:
    - yes
- tags: get,generic-python-lib,_onnxruntime_gpu
  enable_if_env:
    USE_CUDA:
    - yes


variations:
  cuda:
    env:
      USE_CUDA: yes


input_mapping:
  input: CM_IMAGE
  output: CM_APP_IMAGE_CLASSIFICATION_ONNX_PY_OUTPUT

new_env_keys:
  - CM_APP_IMAGE_CLASSIFICATION_ONNX_PY*


new_state_keys:
  - cm_app_image_classification_onnx_py


gui_title: "CM GUI for the MLPerf inference benchmark"

input_description:
  input: 
    desc: "Path to JPEG image to classify"
  output: 
    desc: "Output directory (optional)"
  j:
    desc: "Print JSON output"
    boolean: true

docker:
  skip_run_cmd: 'no'
  all_gpus: 'yes'
  input_paths:
    - input
    - env.CM_IMAGE
    - output
  skip_input_for_fake_run:
    - input
    - env.CM_IMAGE
    - output
    - j
  pre_run_cmds:
    - echo \"CM pre run commands\"
