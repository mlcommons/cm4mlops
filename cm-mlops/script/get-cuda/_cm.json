{
  "alias": "get-cuda",
  "automation_alias": "script",
  "automation_uid": "5b4e0237da074764",
  "cache": true,
  "category": "CUDA automation",
  "category_sort": 7000,
  "clean_files": [],
  "default_env": {
    "CM_CUDA_PATH_LIB_CUDNN_EXISTS": "no",
    "CM_REQUIRE_INSTALL": "no"
  },
  "input_mapping": {
    "cudnn_tar_path": "CM_CUDNN_TAR_FILE_PATH"
  },
  "new_env_keys": [
    "CUDA_HOME",
    "CUDA_PATH",
    "CM_CUDA_*",
    "CM_NVCC_*",
    "+PATH",
    "+C_INCLUDE_PATH",
    "+CPLUS_INCLUDE_PATH",
    "+LD_LIBRARY_PATH",
    "+DYLD_FALLBACK_LIBRARY_PATH",
    "+ LDFLAGS"
  ],
  "prehook_deps": [
    {
      "enable_if_env": {
        "CM_REQUIRE_INSTALL": [
          "yes"
        ]
      },
      "reuse_version": true,
      "tags": "install,cuda,prebuilt"
    },
    {
      "tags": "get,generic-sys-util,_nvidia-cuda-toolkit",
      "enable_if_env": {
        "CM_CUDA_PACKAGE_MANAGER_INSTALL": [ "yes" ]
      }
    }
  ],
  "print_files_if_script_error": [
    "tmp-ver.out"
  ],
  "tags": [
    "get",
    "cuda",
    "cuda-compiler",
    "cuda-lib",
    "toolkit",
    "lib",
    "nvcc",
    "get-nvcc",
    "get-cuda"
  ],
  "uid": "46d133d9ef92422d",
  "variations": {
    "cudnn": {
      "env": {
        "CM_CUDA_NEEDS_CUDNN": "yes"
      },
      "post_deps": [
        {
          "names": [
            "cudnn"
          ],
          "tags": "get,nvidia,cudnn"
        }
      ]
    },
    "lib-only": {
      "env": {
        "CM_CUDA_FULL_TOOLKIT_INSTALL": "no",
        "CM_TMP_FILE_TO_CHECK_UNIX": "libcudart.so",
        "CM_TMP_FILE_TO_CHECK_WINDOWS": "libcudart.dll"
      },
      "group": "installation-mode"
    },
    "toolkit": {
      "default": true,
      "env": {
        "CM_CUDA_FULL_TOOLKIT_INSTALL": "yes",
        "CM_TMP_FILE_TO_CHECK_UNIX": "nvcc",
        "CM_TMP_FILE_TO_CHECK_WINDOWS": "nvcc.exe"
      },
      "group": "installation-mode"
    },
    "package-manager": {
      "env": {
        "CM_CUDA_PACKAGE_MANAGER_INSTALL": "yes"
      }
    }
  },
  "docker": {
    "run": false
  }
}
